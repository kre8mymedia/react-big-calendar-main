[
    {
        "id": "5072866af1bda21d",
        "type": "tab",
        "label": "Notification Jobs",
        "disabled": false,
        "info": ""
    },
    {
        "id": "dce388f5.bdda68",
        "type": "mqtt-broker",
        "name": "Home Broker",
        "broker": "192.168.1.117",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "593577a5116e99b7",
        "type": "redis-config",
        "name": "Local",
        "options": "{\"password\":\"mypassword\"}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "2296cdb3d82177a2",
        "type": "mongodb4-client",
        "name": "",
        "protocol": "mongodb+srv",
        "hostname": "cluster0.dyrt6.mongodb.net",
        "port": "",
        "dbName": "development",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": true,
        "tlsCAFile": "",
        "tlsInsecure": false,
        "uri": "",
        "advanced": "",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "4bddbd7c2e01ee11",
        "type": "debug",
        "z": "5072866af1bda21d",
        "name": "Check request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 60,
        "wires": []
    },
    {
        "id": "7b7d2e3a30759eda",
        "type": "debug",
        "z": "5072866af1bda21d",
        "name": "Check result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "b4226c64378c559c",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "construct",
        "func": "\nconst events = msg.payload;\n\n/**\n* @param {string} startDate\n*/\nfunction formatDates(startDate) {\n    const start = Date.parse(new Date(Date.parse(startDate)).toISOString().slice(0, 16));\n    const readStart = new Date(start).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    const now = Date.parse(new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' }));\n    const readNow = new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    return {\n        start,\n        readStart,\n        now,\n        readNow\n    }\n}\n\n/**\n* @param {number} diffThreshold\n*/\nfunction sendNotification(diffThreshold, event, fields = null) {\n    const diff = fields['diff'];\n    event.notifications.forEach((notification) => {\n        if (notification.type === 'slack') {\n            if (diff < diffThreshold && diff > (diffThreshold - 1)) {\n                node.send({\n                    ...fields,\n                    payload: `curl --header \"Content-Type: application/json\" \\\n        --request POST \\\n        --data '{\"username\":\"webhookbot\", \"icon_emoji\": \":calendar:\", \"text\": \"Event ${event.title} starts in ${diffThreshold} minutes\"}' \\\n        ${notification.hook}`\n                });\n            }\n        }\n    })\n}\n\nfor (let i = 0; i < events.length; i++) {\n    if (events[i].hasOwnProperty('notifications')) {\n        const {\n            start,\n            readStart,\n            now,\n            readNow\n        } = formatDates(events[i].start);\n        \n        const diff = (start - now) / 60 / 1000;\n        sendNotification(15, events[i], {diff, start, readStart, now, readNow});\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 140,
        "wires": [
            [
                "cd280b3084ebbe46"
            ]
        ]
    },
    {
        "id": "cd280b3084ebbe46",
        "type": "exec",
        "z": "5072866af1bda21d",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "3",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 630,
        "y": 160,
        "wires": [
            [
                "7b7d2e3a30759eda"
            ],
            [],
            [
                "7b7d2e3a30759eda"
            ]
        ]
    },
    {
        "id": "dd5a9b1aa3ed6141",
        "type": "http request",
        "z": "5072866af1bda21d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://557d-99-36-3-176.ngrok.io/api/v1/events/all",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "2c756887b75a18cb"
            ]
        ]
    },
    {
        "id": "2c756887b75a18cb",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "create events payload",
        "func": "const data = JSON.parse(msg.payload);\nmsg.payload = data['events'];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            [
                "4bddbd7c2e01ee11",
                "b4226c64378c559c",
                "89b7b9c360551e4e"
            ]
        ]
    },
    {
        "id": "236f410288a25c8c",
        "type": "inject",
        "z": "5072866af1bda21d",
        "name": "One hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1290,
        "y": 60,
        "wires": [
            [
                "8bf4966bc1bb8bbb"
            ]
        ]
    },
    {
        "id": "8e5b496959f36afe",
        "type": "http request",
        "z": "5072866af1bda21d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://557d-99-36-3-176.ngrok.io/api/v1/login",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 160,
        "wires": [
            [
                "62d46cba02bf57ea"
            ]
        ]
    },
    {
        "id": "8bf4966bc1bb8bbb",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "set scraper creds",
        "func": "msg.payload = {\n    email: \"test@gmail.com\",\n    password: \"test1234\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 100,
        "wires": [
            [
                "8e5b496959f36afe",
                "2ff2cf90f8c06c6c"
            ]
        ]
    },
    {
        "id": "d506ee97b64461c4",
        "type": "debug",
        "z": "5072866af1bda21d",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 200,
        "wires": []
    },
    {
        "id": "62d46cba02bf57ea",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "store token",
        "func": "const tokenPayload = JSON.parse(msg.payload)\nglobal.set('token', tokenPayload.token)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 160,
        "wires": [
            [
                "d506ee97b64461c4"
            ]
        ]
    },
    {
        "id": "bb5256d994d964a3",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "set headers",
        "func": "msg.headers = {\n    Authorization: `Bearer ${global.get('token')}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 100,
        "wires": [
            [
                "dd5a9b1aa3ed6141"
            ]
        ]
    },
    {
        "id": "52087733e0a86c0e",
        "type": "comment",
        "z": "5072866af1bda21d",
        "name": "Fetch Scraper User Token",
        "info": "",
        "x": 1270,
        "y": 20,
        "wires": []
    },
    {
        "id": "0e798f3dabdda34e",
        "type": "comment",
        "z": "5072866af1bda21d",
        "name": "Send notification 15 minutes before",
        "info": "",
        "x": 160,
        "y": 20,
        "wires": []
    },
    {
        "id": "8e8a506679eeddfc",
        "type": "inject",
        "z": "5072866af1bda21d",
        "name": "One minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "f49d570dc2b7a951",
                "cf8ace089813cd7e"
            ]
        ]
    },
    {
        "id": "28c031a3b8dc971b",
        "type": "debug",
        "z": "5072866af1bda21d",
        "name": "Check request",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 240,
        "wires": []
    },
    {
        "id": "6832efbce3698241",
        "type": "debug",
        "z": "5072866af1bda21d",
        "name": "Check result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "d7eea75aeae12d5e",
        "type": "exec",
        "z": "5072866af1bda21d",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "3",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 630,
        "y": 340,
        "wires": [
            [
                "6832efbce3698241"
            ],
            [],
            [
                "6832efbce3698241"
            ]
        ]
    },
    {
        "id": "6177249eb8ba7212",
        "type": "http request",
        "z": "5072866af1bda21d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://557d-99-36-3-176.ngrok.io/api/v1/events/all",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "6cd09d74d33c8af2"
            ]
        ]
    },
    {
        "id": "6cd09d74d33c8af2",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "create events payload",
        "func": "const data = JSON.parse(msg.payload);\nmsg.payload = data['events'];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "28c031a3b8dc971b",
                "5b2da9634866c472",
                "bb21ec6841ada98a"
            ]
        ]
    },
    {
        "id": "b881d961c81942f4",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "set headers",
        "func": "msg.headers = {\n    Authorization: `Bearer ${global.get('token')}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 280,
        "wires": [
            [
                "6177249eb8ba7212"
            ]
        ]
    },
    {
        "id": "2921c8c1a2dad8ab",
        "type": "comment",
        "z": "5072866af1bda21d",
        "name": "Send notification 5 minutes before",
        "info": "",
        "x": 160,
        "y": 240,
        "wires": []
    },
    {
        "id": "f14e254a5264a169",
        "type": "http request",
        "z": "5072866af1bda21d",
        "name": "ts-dev-api",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://ts-dev-api.glootie.ml/api/v1/events/all",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 260,
        "y": 140,
        "wires": [
            [
                "2c756887b75a18cb"
            ]
        ]
    },
    {
        "id": "2ff2cf90f8c06c6c",
        "type": "http request",
        "z": "5072866af1bda21d",
        "name": "ts-dev-api",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://ts-dev-api.glootie.ml/api/v1/login",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1140,
        "y": 260,
        "wires": [
            [
                "200f92526e1def01"
            ]
        ]
    },
    {
        "id": "3c133b0eb7dc71cf",
        "type": "debug",
        "z": "5072866af1bda21d",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 300,
        "wires": []
    },
    {
        "id": "200f92526e1def01",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "store prod token",
        "func": "const tokenPayload = JSON.parse(msg.payload)\nglobal.set('prodToken', tokenPayload.token)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 260,
        "wires": [
            [
                "3c133b0eb7dc71cf"
            ]
        ]
    },
    {
        "id": "cf8ace089813cd7e",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "set headers",
        "func": "msg.headers = {\n    Authorization: `Bearer ${global.get('prodToken')}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 320,
        "wires": [
            [
                "a5c76b927e28282e"
            ]
        ]
    },
    {
        "id": "a5c76b927e28282e",
        "type": "http request",
        "z": "5072866af1bda21d",
        "name": "ts-dev-api",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://ts-dev-api.glootie.ml/api/v1/events/all",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 260,
        "y": 320,
        "wires": [
            [
                "6cd09d74d33c8af2"
            ]
        ]
    },
    {
        "id": "f49d570dc2b7a951",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "set headers",
        "func": "msg.headers = {\n    Authorization: `Bearer ${global.get('prodToken')}`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 140,
        "wires": [
            [
                "f14e254a5264a169"
            ]
        ]
    },
    {
        "id": "bb21ec6841ada98a",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "construct slack",
        "func": "\nconst events = msg.payload;\n\n/**\n* @param {string} startDate\n*/\nfunction formatDates(startDate) {\n    const start = Date.parse(new Date(Date.parse(startDate)).toISOString().slice(0, 16));\n    const readStart = new Date(start).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    const now = Date.parse(new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' }));\n    const readNow = new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    return {\n        start,\n        readStart,\n        now,\n        readNow\n    }\n}\n\n/**\n* @param {number} diffThreshold\n*/\nfunction sendNotification(diffThreshold, event, fields = null) {\n    const diff = fields['diff'];\n    event.notifications.forEach((notification) => {\n        if (notification.type === 'slack') {\n            if (diff < diffThreshold && diff > (diffThreshold - 1)) {\n                node.send({\n                    ...fields,\n                    payload: `curl --header \"Content-Type: application/json\" \\\n        --request POST \\\n        --data '{\"username\":\"webhookbot\", \"icon_emoji\": \":calendar:\", \"text\": \"Event ${event.title} starts in ${diffThreshold} minutes\"}' \\\n        ${notification.hook}`\n                });\n            }\n        }\n    })\n}\n\nfor (let i = 0; i < events.length; i++) {\n    if (events[i].hasOwnProperty('notifications')) {\n        const {\n            start,\n            readStart,\n            now,\n            readNow\n        } = formatDates(events[i].start);\n        \n        const diff = (start - now) / 60 / 1000;\n        sendNotification(5, events[i], {diff, start, readStart, now, readNow});\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "d7eea75aeae12d5e"
            ]
        ]
    },
    {
        "id": "5b2da9634866c472",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "construct email",
        "func": "\nconst events = msg.payload;\n\n/**\n* @param {string} startDate\n*/\nfunction formatDates(startDate) {\n    const start = Date.parse(new Date(Date.parse(startDate)).toISOString().slice(0, 16));\n    const readStart = new Date(start).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    const now = Date.parse(new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' }));\n    const readNow = new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    return {\n        start,\n        readStart,\n        now,\n        readNow\n    }\n}\n\n/**\n* @param {number} diffThreshold\n*/\nfunction sendNotification(diffThreshold, event, fields = null) {\n    const diff = fields['diff'];\n    event.notifications.forEach((notification) => {\n        if (notification.type === 'email') {\n            if (diff < diffThreshold && diff > (diffThreshold - 1)) {\n                node.send({\n                    ...fields,\n                    payload: `echo \"</h3>${event.title} in ${diffThreshold} minutes</h3>\" | s-nail -v -s \"${event.title} in ${diffThreshold} minutes\" \\\n-M \"text/html\" \\\n-S v15-compat \\\n-S mta=smtp://kre8mymedia:cvgagajvtfhpgfsb@smtp.gmail.com:587 \\\n-S smtp-auth=login \\\n-S smtp-use-starttls \\\n-S from=kre8mymedia@gmail.com ${notification.hook}`\n                });\n            }\n        }\n    })\n}\n\nfor (let i = 0; i < events.length; i++) {\n    if (events[i].hasOwnProperty('notifications')) {\n        const {\n            start,\n            readStart,\n            now,\n            readNow\n        } = formatDates(events[i].start);\n        \n        const diff = (start - now) / 60 / 1000;\n        sendNotification(5, events[i], {diff, start, readStart, now, readNow});\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 360,
        "wires": [
            [
                "d7eea75aeae12d5e"
            ]
        ]
    },
    {
        "id": "89b7b9c360551e4e",
        "type": "function",
        "z": "5072866af1bda21d",
        "name": "construct email",
        "func": "\nconst events = msg.payload;\n\n/**\n* @param {string} startDate\n*/\nfunction formatDates(startDate) {\n    const start = Date.parse(new Date(Date.parse(startDate)).toISOString().slice(0, 16));\n    const readStart = new Date(start).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    const now = Date.parse(new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' }));\n    const readNow = new Date(Date.now()).toLocaleString('en-US', { timeZone: 'America/Chicago' });\n    return {\n        start,\n        readStart,\n        now,\n        readNow\n    }\n}\n\n/**\n* @param {number} diffThreshold\n*/\nfunction sendNotification(diffThreshold, event, fields = null) {\n    const diff = fields['diff'];\n    event.notifications.forEach((notification) => {\n        if (notification.type === 'email') {\n            if (diff < diffThreshold && diff > (diffThreshold - 1)) {\n                node.send({\n                    ...fields,\n                    payload: `echo \"</h3>${event.title} in ${diffThreshold} minutes</h3>\" | s-nail -v -s \"${event.title} in ${diffThreshold} minutes\" \\\n-M \"text/html\" \\\n-S v15-compat \\\n-S mta=smtp://kre8mymedia:cvgagajvtfhpgfsb@smtp.gmail.com:587 \\\n-S smtp-auth=login \\\n-S smtp-use-starttls \\\n-S from=kre8mymedia@gmail.com ${notification.hook}`\n                });\n            }\n        }\n    })\n}\n\nfor (let i = 0; i < events.length; i++) {\n    if (events[i].hasOwnProperty('notifications')) {\n        const {\n            start,\n            readStart,\n            now,\n            readNow\n        } = formatDates(events[i].start);\n        \n        const diff = (start - now) / 60 / 1000;\n        sendNotification(15, events[i], {diff, start, readStart, now, readNow});\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 180,
        "wires": [
            [
                "cd280b3084ebbe46"
            ]
        ]
    }
]